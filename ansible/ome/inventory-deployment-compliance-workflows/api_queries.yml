---
- hosts: localhost
  vars_files:
    - vars.yml
  tasks:
  
  - name: Get PowerScale API Session Token
    ansible.builtin.uri:
        url: "https://{{ hostname }}/api/SessionService/Sessions"
        method: post
        body_format: json
        validate_certs: false
        status_code: 200,201
        body: |
          {
            "UserName": "{{ username }}",
            "Password": "{{ password }}",
            "SessionType":"API"
          }
    register: api_response
    tags: "api-call"

  - name: print api
    debug:
      msg: "{{api_response}}"
    tags: "api-call"

  - name: Store API auth token 
    ansible.builtin.set_fact:
            ome_auth_token: "{{ api_response.x_auth_token }}"
    tags: "api-call"

  
  - name: Get attribute details
    uri:
       #url: "https://{{ hostname }}/api/TemplateService/Templates(1)/Views(1)/DeviceAttributeViewDetails"
       url: "https://{{ hostname }}/api/TemplateService/Templates(11)/Views(1)/AttributeViewDetails"
       validate_certs: false
       method: get
       #body_format: json
       #body: |
        # {"privileges":{{ admin_priv.json.privileges }}}
       headers:
         X-Auth-Token: "{{ ome_auth_token }}"
       status_code: 200,201,204,409
    register: api_output
    
  - name: Save device_info to a file
    copy: 
      content: "{{ api_output | to_nice_json }}"
      dest: "./output-json/api_output.json"































  # - name: "System Attribute Groups"
  #   ansible.builtin.set_fact:
  #     lcd_fact: "{{ item }}"
  #   when:
  #     - item.DisplayName=='System'
  #   with_items:
  #     - "{{ api_output.json.AttributeGroups }}"
  #   loop_control:
  #     label: "{{ api_output.json.Name }}"
  #   delegate_to: localhost

  # - name: print result
  #   debug:
  #     msg: "{{ lcd_fact }}"
  #   delegate_to: localhost
  # - name: print api
  #   debug:
  #     msg: "{{api_output.json['AttributeEditInfos'][index].Description}}"
  #   loop: "{{ api_output.json['AttributeEditInfos'] }}"
  #   loop_control:
  #     index_var: index
  #   when: item.Id == 2912 
     
  #   tags: "api-call"

  # # - name: print api
  # #   debug:
  # #     msg: "{{api_output['json']['value'][index]['Description']}}"
  # #   loop: "{{ api_output['json']['value'] }}"
  # #   loop_control:
  # #     index_var: index
  # #   tags: "api-call"  

  # - name: Save device_info to a file
  #   copy: 
  #     content: "{{ api_output | to_nice_json }}"
  #     dest: "api_output.json"


      

      
    # - name: Create a template from reference device
    #   dellemc.openmanage.ome_template:
    #     hostname: "{{ hostname }}"
    #     username: "{{ username }}"
    #     password: "{{ ome_password }}"
    #     validate_certs: no
    #     command: "create"
    #     device_service_tag: "GMSTC42"
    #     template_view_type: "Compliance"
    #     attributes:
    #       Name: "GMSTC42-Config-Compliance"
    #       Description: "GMSTC42 Configuration Compliance Template"
    #       Fqdds: "BIOS"
    #   delegate_to: localhost

   

    # - name: Filter the non compliant device based on the retrieved compliance report.
    #   ansible.builtin.set_fact:
    #     non_compliance_devices: "{{ compliance_report.compliance_info | json_query(jquery | default('')) | map(attribute='Id') | list }}"
    #   vars:
    #     jquery: 'value[?ComplianceStatus!=''COMPLIANT'']'


    # - name: Check top-level ComplianceStatus
    #   debug:
    #     msg: "The top-level ComplianceStatus is {{ compliance_report.compliance_info[0].ComplianceAttributeGroups[0].ComplianceReason }}"
    #   #loop: "{{ compliance_report.compliance_info }}"
    #   #when: item.ComplianceStatus is defined
    
    # - name: Drill down ComplianceStatus
    #   debug:
    #     #msg: "Next level ComplianceStatus is {{ compliance_report.compliance_info[0].ComplianceAttributeGroups[0].ComplianceSubAttributeGroups[1].Attributes[0] }}"
    #     msg: " Status {{ item.ComplianceStatus }}: {{ item.ComplianceReason }}"
    #   loop: "{{ compliance_report.compliance_info[0].ComplianceAttributeGroups[0].ComplianceSubAttributeGroups }}"
    #   when: item.ComplianceStatus!=1
    #   loop_control:
    #     label: "Compliance for {{ item.DisplayName }}..."

    # - name: Drill down ComplianceStatus
    #   debug:
    #     #msg: "Next level ComplianceStatus is {{ compliance_report.compliance_info[0].ComplianceAttributeGroups[0].ComplianceSubAttributeGroups[1].Attributes[0] }}"
    #     msg: "ComplianceStatus is {{ item.ComplianceStatus }}: {{ item.ComplianceReason }}"
    #   loop: "{{ compliance_report.compliance_info[0].ComplianceAttributeGroups[0].ComplianceSubAttributeGroups[1].Attributes }}"
    #   #when: item.ComplianceStatus is defined
    #   loop_control:
    #     label: "Processing an {{ item.AttributeId }}..."  

    # - name: Extract ComplianceStatus within ComplianceSubAttributeGroups
    #   set_fact:
    #     compliance_statuses: "{{ compliance_statuses | default([]) + sub_attribute_statuses }}"
    #   loop: "{{ compliance_report.compliance_info[0].ComplianceAttributeGroups[0].ComplianceSubAttributeGroups }}"
    #   loop_control:
    #     loop_var: device
    #   vars:
    #     sub_attribute_statuses: "{{ device.ComplianceAttributeGroups | map(attribute='ComplianceSubAttributeGroups') | flatten | map(attribute='ComplianceStatus') | list }}"

      

    # - name: Determine the lowest ComplianceStatus
    #   set_fact:
    #     lowest_compliance_status: "{{ compliance_statuses | min }}"
    # - name: Check top-level ComplianceStatus
    #   debug:
    #     msg: "The top-level ComplianceStatus is {{ item.ComplianceStatus }}"
    #   loop: "{{ compliance_report.compliance_info[0].ComplianceAttributeGroups[0].ComplianceSubAttributeGroups[1] }}"
      #when: item.ComplianceStatus is defined  
        
    # - name: Create a template from a reference device.
    #   dellemc.openmanage.ome_template:
    #     hostname: "{{ ome_hostname }}"
    #     username: "{{ ome_user }}"
    #     password: "{{ ome_password }}"
    #     validate_certs: no
    #     device_service_tag: "GMSTC42"
    #     attributes:
    #       Name: "device-template-GMSTC42"
    #       Description: "New Template based on GMSTC42"


    # - name: Create a new device group
    #   dellemc.openmanage.ome_groups:
    #     hostname: "{{ ome_hostname }}"
    #     username: "{{ ome_user }}"
    #     password: "{{ ome_password }}"
    #     validate_certs: no
    #     name: "windows-group"
    #     description: "windows group"
        

    # - name: Add devices to a static device group by using the group name and device IDs
    #   dellemc.openmanage.ome_device_group:
    #     hostname: "{{ ome_hostname }}"
    #     username: "{{ ome_user }}"
    #     password: "{{ ome_password }}"
    #     validate_certs: no
    #     name: "windows-group"
    #     device_service_tags:
    #       - "GMSTC42"
    #       - "HZ7N6Q2"