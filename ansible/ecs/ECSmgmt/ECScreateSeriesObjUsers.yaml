---
- name: ECS create new NameSpace
  hosts: Dell_EMC_ECS
  gather_facts: true
  vars:
    ###################################################################################################
    DateTimeStamp: "{{ansible_date_time.date}}.{{ansible_date_time.time}}" ### get date & time
    logHost: "localhost"
    ###################################################################################################
    
    ##### EDITED BELOW VARIBLES TO SUIT YOUR ENVIRONMENT #####
    logFile: "/tmp/ECS_Create_User.{{ DateTimeStamp }}.log" ### Example log file name
    username: "" ### E.g. "root"
    password: "" ### E.g. "ChangeMe"
    ECS_host: "" ### E.g. "192.168.2.21:4443"  ## Add IP or HOSTNAME and change port as required
    nameSpace: "" ### Add your ECS NameSpace
    objUserPrefix: "ansibleuser" ### Add User Name prefix to object users
    NumObjUser: 2 ### Number of object users to create, "don't use quotes"
    secretKey: "" ### leave blank to automatically generate secret keys
    ##################################################################################################

  tasks:

  - name: set number range for users
    set_fact:
      userRange: "{{ range(1, NumObjUser + 1) | list }}"

  - name: Get ECS API authentication token
    uri:
      validate_certs: no
      user: "{{ username }}"
      password: "{{ password }}"
      url: https://{{ECS_host}}/login
      method: GET
      headers:
        Content-Type: application/json
        Accept: application/json
      return_content: yes
    register: results_login
    no_log: True

  - name: Connect to ECS | create new Object Users in NameSpace "{{ nameSpace }}"
    uri:
      validate_certs: no
      url: https://{{ECS_host}}/object/users.json
      method: POST
      headers:
        Content-Type: application/json
        Accept: application/json
        X-SDS-AUTH-TOKEN: "{{ results_login.x_sds_auth_token }}"
      body_format: json
      body:
        {
          user: "{{ objUserPrefix }}{{ item }}",
          namespace: "{{ nameSpace }}"
        }
      return_content: yes
    register: results_CreateObjUser
    changed_when: results_CreateObjUser.status == 200
    failed_when: nameSpace == "" or objUserPrefix == "" or NumObjUser == ""
    #ignore_errors: true
    with_items:
      - "{{ userRange }}"

  #- debug:
  #    var: results_CreateObjUser

  - name: Connect to ECS | add secret key to previously created users in NameSpace "{{ nameSpace }}"
    uri:
      validate_certs: no
      url: "https://{{ECS_host}}/object/user-secret-keys/{{ objUserPrefix }}{{ item }}"
      method: POST
      headers:
        Content-Type: application/json
        Accept: application/json
        X-SDS-AUTH-TOKEN: "{{ results_login.x_sds_auth_token }}"
      body_format: json
      body:
        {
          namespace: "{{ nameSpace }}",
          secretkey: "{{secretKey }}"
        }
      return_content: yes
    register: results_CreateSecretKey
    changed_when: results_CreateSecretKey.status == 200
    failed_when: false
    with_items:
      - "{{ userRange }}"
    notify: userlist

  #- debug:
  #    var: results_CreateSecretKey

  - name: execute ansible handlers
    meta: flush_handlers
  
  - name: Logout ECS API token
    uri:
      validate_certs: no
      user: "{{ username }}"
      password: "{{ password }}"
      #url: https://{{ECS_host}}/logout?force=true
      url: https://{{ECS_host}}/logout
      method: GET
      headers:
        Content-Type: application/json
        Accept: application/json
        X-SDS-AUTH-TOKEN: "{{ results_login.x_sds_auth_token }}"
      return_content: yes
    register: results_logout
    no_log: True


  handlers:

    - name: userlist
      lineinfile:
        create: yes
        mode: '0444'
        dest: "{{ logFile }}"
        line: "{{ results_CreateObjUser | json_query('results[*].[json]') | to_nice_json }} {{ results_CreateSecretKey | json_query('results[*].[json]') | to_nice_json }}" 
        insertafter: EOF
      failed_when: false
      delegate_to: "{{ logHost }}"
